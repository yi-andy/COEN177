Lab 5 Observations: 
1. threadSync.c creates threads and uses semaphores to enter the critical section for each thread. You can see that the threads are entering the critical section one at the time, and when joined, it outputs that the thread has returned, but the past thread prints that it has returned after the next thread has already said it entered the CS. 
2. I used 3 global semaphores full, empty, and mutex. Full would could track if the buffer is full from the producer, and empty if the buffer is empty from the consumer, and mutex to ensure that producers are not competing with each other or consumers are producing each other. In the producer, I used sem_wait on empty and mutex in order to decrement empty and mutex in order to lock the semaphores as they are both greater then 0, and then the producer can access the CS which is to write to the buffer. For the consumer, I used sem_wait on full and mutex in order to lock the sempaphores to indicate that the consumer wants to consume. The two producer and consumer functions run forever because of the do while(1) loop. 
